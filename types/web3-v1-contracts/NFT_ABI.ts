/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type ControllerAdded = ContractEventLog<{
  controller: string;
  0: string;
}>;
export type ControllerRemoved = ContractEventLog<{
  controller: string;
  0: string;
}>;
export type NameMigrated = ContractEventLog<{
  id: string;
  owner: string;
  expires: string;
  0: string;
  1: string;
  2: string;
}>;
export type NameRegistered = ContractEventLog<{
  id: string;
  owner: string;
  expires: string;
  0: string;
  1: string;
  2: string;
}>;
export type NameRenewed = ContractEventLog<{
  id: string;
  expires: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface NFT_ABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): NFT_ABI;
  clone(): NFT_ABI;
  methods: {
    GRACE_PERIOD(): NonPayableTransactionObject<string>;

    addController(controller: string): NonPayableTransactionObject<void>;

    allOwnedIds(user: string): NonPayableTransactionObject<string[]>;

    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    available(id: number | string | BN): NonPayableTransactionObject<boolean>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    baseExtension(): NonPayableTransactionObject<string>;

    baseNode(): NonPayableTransactionObject<string>;

    baseURI(): NonPayableTransactionObject<string>;

    controllers(arg0: string): NonPayableTransactionObject<boolean>;

    ens(): NonPayableTransactionObject<string>;

    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getDomainName(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getOwnedDomains(user: string): NonPayableTransactionObject<{
      0: string[];
      1: string[];
    }>;

    getPrimaryDomainId(user: string): NonPayableTransactionObject<string>;

    getPrimaryDomainName(user: string): NonPayableTransactionObject<string>;

    getUserFromPrimaryName(name: string): NonPayableTransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    isOwner(): NonPayableTransactionObject<boolean>;

    myPrimaryDomainInfo(): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    name(): NonPayableTransactionObject<string>;

    nameExpires(id: number | string | BN): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    reclaim(
      id: number | string | BN,
      owner: string
    ): NonPayableTransactionObject<void>;

    register(
      name: string,
      id: number | string | BN,
      owner: string,
      duration: number | string | BN
    ): NonPayableTransactionObject<string>;

    registerOnly(
      name: string,
      id: number | string | BN,
      owner: string,
      duration: number | string | BN
    ): NonPayableTransactionObject<string>;

    removeController(controller: string): NonPayableTransactionObject<void>;

    renew(
      id: number | string | BN,
      duration: number | string | BN
    ): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      to: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    setBaseExtension(
      _newBaseExtension: string
    ): NonPayableTransactionObject<void>;

    setBaseURI(_newBaseURI: string): NonPayableTransactionObject<void>;

    setEns(_ens: string): NonPayableTransactionObject<void>;

    setNode(_baseNode: string | number[]): NonPayableTransactionObject<void>;

    setPrimaryDomain(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    setResolver(resolver: string): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceID: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    tokenURI(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    ControllerAdded(cb?: Callback<ControllerAdded>): EventEmitter;
    ControllerAdded(
      options?: EventOptions,
      cb?: Callback<ControllerAdded>
    ): EventEmitter;

    ControllerRemoved(cb?: Callback<ControllerRemoved>): EventEmitter;
    ControllerRemoved(
      options?: EventOptions,
      cb?: Callback<ControllerRemoved>
    ): EventEmitter;

    NameMigrated(cb?: Callback<NameMigrated>): EventEmitter;
    NameMigrated(
      options?: EventOptions,
      cb?: Callback<NameMigrated>
    ): EventEmitter;

    NameRegistered(cb?: Callback<NameRegistered>): EventEmitter;
    NameRegistered(
      options?: EventOptions,
      cb?: Callback<NameRegistered>
    ): EventEmitter;

    NameRenewed(cb?: Callback<NameRenewed>): EventEmitter;
    NameRenewed(
      options?: EventOptions,
      cb?: Callback<NameRenewed>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "ControllerAdded", cb: Callback<ControllerAdded>): void;
  once(
    event: "ControllerAdded",
    options: EventOptions,
    cb: Callback<ControllerAdded>
  ): void;

  once(event: "ControllerRemoved", cb: Callback<ControllerRemoved>): void;
  once(
    event: "ControllerRemoved",
    options: EventOptions,
    cb: Callback<ControllerRemoved>
  ): void;

  once(event: "NameMigrated", cb: Callback<NameMigrated>): void;
  once(
    event: "NameMigrated",
    options: EventOptions,
    cb: Callback<NameMigrated>
  ): void;

  once(event: "NameRegistered", cb: Callback<NameRegistered>): void;
  once(
    event: "NameRegistered",
    options: EventOptions,
    cb: Callback<NameRegistered>
  ): void;

  once(event: "NameRenewed", cb: Callback<NameRenewed>): void;
  once(
    event: "NameRenewed",
    options: EventOptions,
    cb: Callback<NameRenewed>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
