/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  approved: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
  owner: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type CreditCleared = ContractEventLog<{
  _hashedPayload: string;
  0: string;
}>;
export type CreditStored = ContractEventLog<{
  _hashedPayload: string;
  _payload: string;
  0: string;
  1: string;
}>;
export type MessageFailed = ContractEventLog<{
  _srcChainId: string;
  _srcAddress: string;
  _nonce: string;
  _payload: string;
  _reason: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ReceiveFromChain = ContractEventLog<{
  _srcChainId: string;
  _srcAddress: string;
  _toAddress: string;
  _tokenIds: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;
export type RetryMessageSuccess = ContractEventLog<{
  _srcChainId: string;
  _srcAddress: string;
  _nonce: string;
  _payloadHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type SendToChain = ContractEventLog<{
  _dstChainId: string;
  _from: string;
  _toAddress: string;
  _tokenIds: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
}>;
export type SetDstChainIdToBatchLimit = ContractEventLog<{
  _dstChainId: string;
  _dstChainIdToBatchLimit: string;
  0: string;
  1: string;
}>;
export type SetDstChainIdToTransferGas = ContractEventLog<{
  _dstChainId: string;
  _dstChainIdToTransferGas: string;
  0: string;
  1: string;
}>;
export type SetMinDstGas = ContractEventLog<{
  _dstChainId: string;
  _type: string;
  _minDstGas: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetMinGasToTransferAndStore = ContractEventLog<{
  _minGasToTransferAndStore: string;
  0: string;
}>;
export type SetPrecrime = ContractEventLog<{
  precrime: string;
  0: string;
}>;
export type SetTrustedRemote = ContractEventLog<{
  _remoteChainId: string;
  _path: string;
  0: string;
  1: string;
}>;
export type SetTrustedRemoteAddress = ContractEventLog<{
  _remoteChainId: string;
  _remoteAddress: string;
  0: string;
  1: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  tokenId: string;
  0: string;
  1: string;
  2: string;
}>;

export interface MerklyAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MerklyAbi;
  clone(): MerklyAbi;
  methods: {
    DEFAULT_PAYLOAD_SIZE_LIMIT(): NonPayableTransactionObject<string>;

    FUNCTION_TYPE_SEND(): NonPayableTransactionObject<string>;

    approve(
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    balanceOf(owner: string): NonPayableTransactionObject<string>;

    bridgeGas(
      _dstChainId: number | string | BN,
      _zroPaymentAddress: string,
      _adapterParams: string | number[]
    ): PayableTransactionObject<void>;

    clearCredits(
      _payload: string | number[]
    ): NonPayableTransactionObject<void>;

    dstChainIdToBatchLimit(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    dstChainIdToTransferGas(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    estimateGasBridgeFee(
      _dstChainId: number | string | BN,
      _useZro: boolean,
      _adapterParams: string | number[]
    ): NonPayableTransactionObject<{
      nativeFee: string;
      zroFee: string;
      0: string;
      1: string;
    }>;

    estimateSendBatchFee(
      _dstChainId: number | string | BN,
      _toAddress: string | number[],
      _tokenIds: (number | string | BN)[],
      _useZro: boolean,
      _adapterParams: string | number[]
    ): NonPayableTransactionObject<{
      nativeFee: string;
      zroFee: string;
      0: string;
      1: string;
    }>;

    estimateSendFee(
      _dstChainId: number | string | BN,
      _toAddress: string | number[],
      _tokenId: number | string | BN,
      _useZro: boolean,
      _adapterParams: string | number[]
    ): NonPayableTransactionObject<{
      nativeFee: string;
      zroFee: string;
      0: string;
      1: string;
    }>;

    failedMessages(
      arg0: number | string | BN,
      arg1: string | number[],
      arg2: number | string | BN
    ): NonPayableTransactionObject<string>;

    fee(): NonPayableTransactionObject<string>;

    forceResumeReceive(
      _srcChainId: number | string | BN,
      _srcAddress: string | number[]
    ): NonPayableTransactionObject<void>;

    getApproved(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<string>;

    getConfig(
      _version: number | string | BN,
      _chainId: number | string | BN,
      arg2: string,
      _configType: number | string | BN
    ): NonPayableTransactionObject<string>;

    getTrustedRemoteAddress(
      _remoteChainId: number | string | BN
    ): NonPayableTransactionObject<string>;

    isApprovedForAll(
      owner: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    isTrustedRemote(
      _srcChainId: number | string | BN,
      _srcAddress: string | number[]
    ): NonPayableTransactionObject<boolean>;

    lzEndpoint(): NonPayableTransactionObject<string>;

    lzReceive(
      _srcChainId: number | string | BN,
      _srcAddress: string | number[],
      _nonce: number | string | BN,
      _payload: string | number[]
    ): NonPayableTransactionObject<void>;

    maxMintId(): NonPayableTransactionObject<string>;

    minDstGasLookup(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    minGasToTransferAndStore(): NonPayableTransactionObject<string>;

    mint(): PayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    nextMintId(): NonPayableTransactionObject<string>;

    nonblockingLzReceive(
      _srcChainId: number | string | BN,
      _srcAddress: string | number[],
      _nonce: number | string | BN,
      _payload: string | number[]
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

    payloadSizeLimitLookup(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    precrime(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    retryMessage(
      _srcChainId: number | string | BN,
      _srcAddress: string | number[],
      _nonce: number | string | BN,
      _payload: string | number[]
    ): PayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    sendBatchFrom(
      _from: string,
      _dstChainId: number | string | BN,
      _toAddress: string | number[],
      _tokenIds: (number | string | BN)[],
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: string | number[]
    ): PayableTransactionObject<void>;

    sendFrom(
      _from: string,
      _dstChainId: number | string | BN,
      _toAddress: string | number[],
      _tokenId: number | string | BN,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: string | number[]
    ): PayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    setConfig(
      _version: number | string | BN,
      _chainId: number | string | BN,
      _configType: number | string | BN,
      _config: string | number[]
    ): NonPayableTransactionObject<void>;

    setDstChainIdToBatchLimit(
      _dstChainId: number | string | BN,
      _dstChainIdToBatchLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    setDstChainIdToTransferGas(
      _dstChainId: number | string | BN,
      _dstChainIdToTransferGas: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFee(_fee: number | string | BN): NonPayableTransactionObject<void>;

    setMinDstGas(
      _dstChainId: number | string | BN,
      _packetType: number | string | BN,
      _minGas: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinGasToTransferAndStore(
      _minGasToTransferAndStore: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPayloadSizeLimit(
      _dstChainId: number | string | BN,
      _size: number | string | BN
    ): NonPayableTransactionObject<void>;

    setPrecrime(_precrime: string): NonPayableTransactionObject<void>;

    setReceiveVersion(
      _version: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSendVersion(
      _version: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTrustedRemote(
      _remoteChainId: number | string | BN,
      _path: string | number[]
    ): NonPayableTransactionObject<void>;

    setTrustedRemoteAddress(
      _remoteChainId: number | string | BN,
      _remoteAddress: string | number[]
    ): NonPayableTransactionObject<void>;

    storedCredits(arg0: string | number[]): NonPayableTransactionObject<{
      srcChainId: string;
      toAddress: string;
      index: string;
      creditsRemain: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
    }>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    tokenURI(id: number | string | BN): NonPayableTransactionObject<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    trustedRemoteLookup(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    withdraw(): PayableTransactionObject<void>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    CreditCleared(cb?: Callback<CreditCleared>): EventEmitter;
    CreditCleared(
      options?: EventOptions,
      cb?: Callback<CreditCleared>
    ): EventEmitter;

    CreditStored(cb?: Callback<CreditStored>): EventEmitter;
    CreditStored(
      options?: EventOptions,
      cb?: Callback<CreditStored>
    ): EventEmitter;

    MessageFailed(cb?: Callback<MessageFailed>): EventEmitter;
    MessageFailed(
      options?: EventOptions,
      cb?: Callback<MessageFailed>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ReceiveFromChain(cb?: Callback<ReceiveFromChain>): EventEmitter;
    ReceiveFromChain(
      options?: EventOptions,
      cb?: Callback<ReceiveFromChain>
    ): EventEmitter;

    RetryMessageSuccess(cb?: Callback<RetryMessageSuccess>): EventEmitter;
    RetryMessageSuccess(
      options?: EventOptions,
      cb?: Callback<RetryMessageSuccess>
    ): EventEmitter;

    SendToChain(cb?: Callback<SendToChain>): EventEmitter;
    SendToChain(
      options?: EventOptions,
      cb?: Callback<SendToChain>
    ): EventEmitter;

    SetDstChainIdToBatchLimit(
      cb?: Callback<SetDstChainIdToBatchLimit>
    ): EventEmitter;
    SetDstChainIdToBatchLimit(
      options?: EventOptions,
      cb?: Callback<SetDstChainIdToBatchLimit>
    ): EventEmitter;

    SetDstChainIdToTransferGas(
      cb?: Callback<SetDstChainIdToTransferGas>
    ): EventEmitter;
    SetDstChainIdToTransferGas(
      options?: EventOptions,
      cb?: Callback<SetDstChainIdToTransferGas>
    ): EventEmitter;

    SetMinDstGas(cb?: Callback<SetMinDstGas>): EventEmitter;
    SetMinDstGas(
      options?: EventOptions,
      cb?: Callback<SetMinDstGas>
    ): EventEmitter;

    SetMinGasToTransferAndStore(
      cb?: Callback<SetMinGasToTransferAndStore>
    ): EventEmitter;
    SetMinGasToTransferAndStore(
      options?: EventOptions,
      cb?: Callback<SetMinGasToTransferAndStore>
    ): EventEmitter;

    SetPrecrime(cb?: Callback<SetPrecrime>): EventEmitter;
    SetPrecrime(
      options?: EventOptions,
      cb?: Callback<SetPrecrime>
    ): EventEmitter;

    SetTrustedRemote(cb?: Callback<SetTrustedRemote>): EventEmitter;
    SetTrustedRemote(
      options?: EventOptions,
      cb?: Callback<SetTrustedRemote>
    ): EventEmitter;

    SetTrustedRemoteAddress(
      cb?: Callback<SetTrustedRemoteAddress>
    ): EventEmitter;
    SetTrustedRemoteAddress(
      options?: EventOptions,
      cb?: Callback<SetTrustedRemoteAddress>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "CreditCleared", cb: Callback<CreditCleared>): void;
  once(
    event: "CreditCleared",
    options: EventOptions,
    cb: Callback<CreditCleared>
  ): void;

  once(event: "CreditStored", cb: Callback<CreditStored>): void;
  once(
    event: "CreditStored",
    options: EventOptions,
    cb: Callback<CreditStored>
  ): void;

  once(event: "MessageFailed", cb: Callback<MessageFailed>): void;
  once(
    event: "MessageFailed",
    options: EventOptions,
    cb: Callback<MessageFailed>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ReceiveFromChain", cb: Callback<ReceiveFromChain>): void;
  once(
    event: "ReceiveFromChain",
    options: EventOptions,
    cb: Callback<ReceiveFromChain>
  ): void;

  once(event: "RetryMessageSuccess", cb: Callback<RetryMessageSuccess>): void;
  once(
    event: "RetryMessageSuccess",
    options: EventOptions,
    cb: Callback<RetryMessageSuccess>
  ): void;

  once(event: "SendToChain", cb: Callback<SendToChain>): void;
  once(
    event: "SendToChain",
    options: EventOptions,
    cb: Callback<SendToChain>
  ): void;

  once(
    event: "SetDstChainIdToBatchLimit",
    cb: Callback<SetDstChainIdToBatchLimit>
  ): void;
  once(
    event: "SetDstChainIdToBatchLimit",
    options: EventOptions,
    cb: Callback<SetDstChainIdToBatchLimit>
  ): void;

  once(
    event: "SetDstChainIdToTransferGas",
    cb: Callback<SetDstChainIdToTransferGas>
  ): void;
  once(
    event: "SetDstChainIdToTransferGas",
    options: EventOptions,
    cb: Callback<SetDstChainIdToTransferGas>
  ): void;

  once(event: "SetMinDstGas", cb: Callback<SetMinDstGas>): void;
  once(
    event: "SetMinDstGas",
    options: EventOptions,
    cb: Callback<SetMinDstGas>
  ): void;

  once(
    event: "SetMinGasToTransferAndStore",
    cb: Callback<SetMinGasToTransferAndStore>
  ): void;
  once(
    event: "SetMinGasToTransferAndStore",
    options: EventOptions,
    cb: Callback<SetMinGasToTransferAndStore>
  ): void;

  once(event: "SetPrecrime", cb: Callback<SetPrecrime>): void;
  once(
    event: "SetPrecrime",
    options: EventOptions,
    cb: Callback<SetPrecrime>
  ): void;

  once(event: "SetTrustedRemote", cb: Callback<SetTrustedRemote>): void;
  once(
    event: "SetTrustedRemote",
    options: EventOptions,
    cb: Callback<SetTrustedRemote>
  ): void;

  once(
    event: "SetTrustedRemoteAddress",
    cb: Callback<SetTrustedRemoteAddress>
  ): void;
  once(
    event: "SetTrustedRemoteAddress",
    options: EventOptions,
    cb: Callback<SetTrustedRemoteAddress>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
