/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Claimed = ContractEventLog<{
  index: string;
  account: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type EIP712DomainChanged = ContractEventLog<{}>;

export interface ZK_ABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ZK_ABI;
  clone(): ZK_ABI;
  methods: {
    ADMIN(): NonPayableTransactionObject<string>;

    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    MAXIMUM_TOTAL_CLAIMABLE(): NonPayableTransactionObject<string>;

    MERKLE_ROOT(): NonPayableTransactionObject<string>;

    TOKEN(): NonPayableTransactionObject<string>;

    WINDOW_END(): NonPayableTransactionObject<string>;

    WINDOW_START(): NonPayableTransactionObject<string>;

    ZK_CLAIM_AND_DELEGATE_TYPEHASH(): NonPayableTransactionObject<string>;

    ZK_CLAIM_TYPEHASH(): NonPayableTransactionObject<string>;

    claim(
      _index: number | string | BN,
      _amount: number | string | BN,
      _merkleProof: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    claimAndDelegate(
      _index: number | string | BN,
      _amount: number | string | BN,
      _merkleProof: (string | number[])[],
      _delegateInfo: [string, number | string | BN, string | number[]]
    ): NonPayableTransactionObject<void>;

    claimAndDelegateOnBehalf(
      _index: number | string | BN,
      _amount: number | string | BN,
      _merkleProof: (string | number[])[],
      _claimSignatureInfo: [string, number | string | BN, string | number[]],
      _delegateInfo: [string, number | string | BN, string | number[]]
    ): NonPayableTransactionObject<void>;

    claimOnBehalf(
      _index: number | string | BN,
      _amount: number | string | BN,
      _merkleProof: (string | number[])[],
      _claimSignatureInfo: [string, number | string | BN, string | number[]]
    ): NonPayableTransactionObject<void>;

    eip712Domain(): NonPayableTransactionObject<{
      fields: string;
      name: string;
      version: string;
      chainId: string;
      verifyingContract: string;
      salt: string;
      extensions: string[];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string[];
    }>;

    invalidateNonce(): NonPayableTransactionObject<void>;

    isClaimed(
      _index: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    nonces(owner: string): NonPayableTransactionObject<string>;

    sweepUnclaimed(
      _unclaimedReceiver: string
    ): NonPayableTransactionObject<void>;

    totalClaimed(): NonPayableTransactionObject<string>;
  };
  events: {
    Claimed(cb?: Callback<Claimed>): EventEmitter;
    Claimed(options?: EventOptions, cb?: Callback<Claimed>): EventEmitter;

    EIP712DomainChanged(cb?: Callback<EIP712DomainChanged>): EventEmitter;
    EIP712DomainChanged(
      options?: EventOptions,
      cb?: Callback<EIP712DomainChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Claimed", cb: Callback<Claimed>): void;
  once(event: "Claimed", options: EventOptions, cb: Callback<Claimed>): void;

  once(event: "EIP712DomainChanged", cb: Callback<EIP712DomainChanged>): void;
  once(
    event: "EIP712DomainChanged",
    options: EventOptions,
    cb: Callback<EIP712DomainChanged>
  ): void;
}
