/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type MinterAdded = ContractEventLog<{
  minter_address: string;
  0: string;
}>;
export type MinterRemoved = ContractEventLog<{
  minter_address: string;
  0: string;
}>;
export type OwnerChanged = ContractEventLog<{
  oldOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type OwnerNominated = ContractEventLog<{
  newOwner: string;
  0: string;
}>;
export type TimelockChanged = ContractEventLog<{
  timelock_address: string;
  0: string;
}>;
export type TokenMinterBurned = ContractEventLog<{
  from: string;
  to: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type TokenMinterMinted = ContractEventLog<{
  from: string;
  to: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface TOKEN_ABI extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TOKEN_ABI;
  clone(): TOKEN_ABI;
  methods: {
    DOMAIN_SEPARATOR(): NonPayableTransactionObject<string>;

    acceptOwnership(): NonPayableTransactionObject<void>;

    addMinter(minter_address: string): NonPayableTransactionObject<void>;

    allowance(
      owner: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    balanceOf(account: string): NonPayableTransactionObject<string>;

    burn(amount: number | string | BN): NonPayableTransactionObject<void>;

    burnFrom(
      account: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    minter_burn_from(
      b_address: string,
      b_amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    minter_mint(
      m_address: string,
      m_amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    minters(arg0: string): NonPayableTransactionObject<boolean>;

    minters_array(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    nominateNewOwner(_owner: string): NonPayableTransactionObject<void>;

    nominatedOwner(): NonPayableTransactionObject<string>;

    nonces(owner: string): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    permit(
      owner: string,
      spender: string,
      value: number | string | BN,
      deadline: number | string | BN,
      v: number | string | BN,
      r: string | number[],
      s: string | number[]
    ): NonPayableTransactionObject<void>;

    removeMinter(minter_address: string): NonPayableTransactionObject<void>;

    setTimelock(_timelock_address: string): NonPayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    timelock_address(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      to: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    MinterAdded(cb?: Callback<MinterAdded>): EventEmitter;
    MinterAdded(
      options?: EventOptions,
      cb?: Callback<MinterAdded>
    ): EventEmitter;

    MinterRemoved(cb?: Callback<MinterRemoved>): EventEmitter;
    MinterRemoved(
      options?: EventOptions,
      cb?: Callback<MinterRemoved>
    ): EventEmitter;

    OwnerChanged(cb?: Callback<OwnerChanged>): EventEmitter;
    OwnerChanged(
      options?: EventOptions,
      cb?: Callback<OwnerChanged>
    ): EventEmitter;

    OwnerNominated(cb?: Callback<OwnerNominated>): EventEmitter;
    OwnerNominated(
      options?: EventOptions,
      cb?: Callback<OwnerNominated>
    ): EventEmitter;

    TimelockChanged(cb?: Callback<TimelockChanged>): EventEmitter;
    TimelockChanged(
      options?: EventOptions,
      cb?: Callback<TimelockChanged>
    ): EventEmitter;

    TokenMinterBurned(cb?: Callback<TokenMinterBurned>): EventEmitter;
    TokenMinterBurned(
      options?: EventOptions,
      cb?: Callback<TokenMinterBurned>
    ): EventEmitter;

    TokenMinterMinted(cb?: Callback<TokenMinterMinted>): EventEmitter;
    TokenMinterMinted(
      options?: EventOptions,
      cb?: Callback<TokenMinterMinted>
    ): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "MinterAdded", cb: Callback<MinterAdded>): void;
  once(
    event: "MinterAdded",
    options: EventOptions,
    cb: Callback<MinterAdded>
  ): void;

  once(event: "MinterRemoved", cb: Callback<MinterRemoved>): void;
  once(
    event: "MinterRemoved",
    options: EventOptions,
    cb: Callback<MinterRemoved>
  ): void;

  once(event: "OwnerChanged", cb: Callback<OwnerChanged>): void;
  once(
    event: "OwnerChanged",
    options: EventOptions,
    cb: Callback<OwnerChanged>
  ): void;

  once(event: "OwnerNominated", cb: Callback<OwnerNominated>): void;
  once(
    event: "OwnerNominated",
    options: EventOptions,
    cb: Callback<OwnerNominated>
  ): void;

  once(event: "TimelockChanged", cb: Callback<TimelockChanged>): void;
  once(
    event: "TimelockChanged",
    options: EventOptions,
    cb: Callback<TimelockChanged>
  ): void;

  once(event: "TokenMinterBurned", cb: Callback<TokenMinterBurned>): void;
  once(
    event: "TokenMinterBurned",
    options: EventOptions,
    cb: Callback<TokenMinterBurned>
  ): void;

  once(event: "TokenMinterMinted", cb: Callback<TokenMinterMinted>): void;
  once(
    event: "TokenMinterMinted",
    options: EventOptions,
    cb: Callback<TokenMinterMinted>
  ): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
