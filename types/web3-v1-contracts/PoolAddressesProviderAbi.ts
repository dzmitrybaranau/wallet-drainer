/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ACLAdminUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type ACLManagerUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type AddressSet = ContractEventLog<{
  id: string;
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
  2: string;
}>;
export type AddressSetAsProxy = ContractEventLog<{
  id: string;
  proxyAddress: string;
  oldImplementationAddress: string;
  newImplementationAddress: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type MarketIdSet = ContractEventLog<{
  oldMarketId: string;
  newMarketId: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PoolConfiguratorUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type PoolDataProviderUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type PoolUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type PriceOracleSentinelUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type PriceOracleUpdated = ContractEventLog<{
  oldAddress: string;
  newAddress: string;
  0: string;
  1: string;
}>;
export type ProxyCreated = ContractEventLog<{
  id: string;
  proxyAddress: string;
  implementationAddress: string;
  0: string;
  1: string;
  2: string;
}>;

export interface PoolAddressesProviderAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PoolAddressesProviderAbi;
  clone(): PoolAddressesProviderAbi;
  methods: {
    getACLAdmin(): NonPayableTransactionObject<string>;

    getACLManager(): NonPayableTransactionObject<string>;

    getAddress(id: string | number[]): NonPayableTransactionObject<string>;

    getMarketId(): NonPayableTransactionObject<string>;

    getPool(): NonPayableTransactionObject<string>;

    getPoolConfigurator(): NonPayableTransactionObject<string>;

    getPoolDataProvider(): NonPayableTransactionObject<string>;

    getPriceOracle(): NonPayableTransactionObject<string>;

    getPriceOracleSentinel(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setACLAdmin(newAclAdmin: string): NonPayableTransactionObject<void>;

    setACLManager(newAclManager: string): NonPayableTransactionObject<void>;

    setAddress(
      id: string | number[],
      newAddress: string
    ): NonPayableTransactionObject<void>;

    setAddressAsProxy(
      id: string | number[],
      newImplementationAddress: string
    ): NonPayableTransactionObject<void>;

    setMarketId(newMarketId: string): NonPayableTransactionObject<void>;

    setPoolConfiguratorImpl(
      newPoolConfiguratorImpl: string
    ): NonPayableTransactionObject<void>;

    setPoolDataProvider(
      newDataProvider: string
    ): NonPayableTransactionObject<void>;

    setPoolImpl(newPoolImpl: string): NonPayableTransactionObject<void>;

    setPriceOracle(newPriceOracle: string): NonPayableTransactionObject<void>;

    setPriceOracleSentinel(
      newPriceOracleSentinel: string
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    ACLAdminUpdated(cb?: Callback<ACLAdminUpdated>): EventEmitter;
    ACLAdminUpdated(
      options?: EventOptions,
      cb?: Callback<ACLAdminUpdated>
    ): EventEmitter;

    ACLManagerUpdated(cb?: Callback<ACLManagerUpdated>): EventEmitter;
    ACLManagerUpdated(
      options?: EventOptions,
      cb?: Callback<ACLManagerUpdated>
    ): EventEmitter;

    AddressSet(cb?: Callback<AddressSet>): EventEmitter;
    AddressSet(options?: EventOptions, cb?: Callback<AddressSet>): EventEmitter;

    AddressSetAsProxy(cb?: Callback<AddressSetAsProxy>): EventEmitter;
    AddressSetAsProxy(
      options?: EventOptions,
      cb?: Callback<AddressSetAsProxy>
    ): EventEmitter;

    MarketIdSet(cb?: Callback<MarketIdSet>): EventEmitter;
    MarketIdSet(
      options?: EventOptions,
      cb?: Callback<MarketIdSet>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PoolConfiguratorUpdated(
      cb?: Callback<PoolConfiguratorUpdated>
    ): EventEmitter;
    PoolConfiguratorUpdated(
      options?: EventOptions,
      cb?: Callback<PoolConfiguratorUpdated>
    ): EventEmitter;

    PoolDataProviderUpdated(
      cb?: Callback<PoolDataProviderUpdated>
    ): EventEmitter;
    PoolDataProviderUpdated(
      options?: EventOptions,
      cb?: Callback<PoolDataProviderUpdated>
    ): EventEmitter;

    PoolUpdated(cb?: Callback<PoolUpdated>): EventEmitter;
    PoolUpdated(
      options?: EventOptions,
      cb?: Callback<PoolUpdated>
    ): EventEmitter;

    PriceOracleSentinelUpdated(
      cb?: Callback<PriceOracleSentinelUpdated>
    ): EventEmitter;
    PriceOracleSentinelUpdated(
      options?: EventOptions,
      cb?: Callback<PriceOracleSentinelUpdated>
    ): EventEmitter;

    PriceOracleUpdated(cb?: Callback<PriceOracleUpdated>): EventEmitter;
    PriceOracleUpdated(
      options?: EventOptions,
      cb?: Callback<PriceOracleUpdated>
    ): EventEmitter;

    ProxyCreated(cb?: Callback<ProxyCreated>): EventEmitter;
    ProxyCreated(
      options?: EventOptions,
      cb?: Callback<ProxyCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ACLAdminUpdated", cb: Callback<ACLAdminUpdated>): void;
  once(
    event: "ACLAdminUpdated",
    options: EventOptions,
    cb: Callback<ACLAdminUpdated>
  ): void;

  once(event: "ACLManagerUpdated", cb: Callback<ACLManagerUpdated>): void;
  once(
    event: "ACLManagerUpdated",
    options: EventOptions,
    cb: Callback<ACLManagerUpdated>
  ): void;

  once(event: "AddressSet", cb: Callback<AddressSet>): void;
  once(
    event: "AddressSet",
    options: EventOptions,
    cb: Callback<AddressSet>
  ): void;

  once(event: "AddressSetAsProxy", cb: Callback<AddressSetAsProxy>): void;
  once(
    event: "AddressSetAsProxy",
    options: EventOptions,
    cb: Callback<AddressSetAsProxy>
  ): void;

  once(event: "MarketIdSet", cb: Callback<MarketIdSet>): void;
  once(
    event: "MarketIdSet",
    options: EventOptions,
    cb: Callback<MarketIdSet>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "PoolConfiguratorUpdated",
    cb: Callback<PoolConfiguratorUpdated>
  ): void;
  once(
    event: "PoolConfiguratorUpdated",
    options: EventOptions,
    cb: Callback<PoolConfiguratorUpdated>
  ): void;

  once(
    event: "PoolDataProviderUpdated",
    cb: Callback<PoolDataProviderUpdated>
  ): void;
  once(
    event: "PoolDataProviderUpdated",
    options: EventOptions,
    cb: Callback<PoolDataProviderUpdated>
  ): void;

  once(event: "PoolUpdated", cb: Callback<PoolUpdated>): void;
  once(
    event: "PoolUpdated",
    options: EventOptions,
    cb: Callback<PoolUpdated>
  ): void;

  once(
    event: "PriceOracleSentinelUpdated",
    cb: Callback<PriceOracleSentinelUpdated>
  ): void;
  once(
    event: "PriceOracleSentinelUpdated",
    options: EventOptions,
    cb: Callback<PriceOracleSentinelUpdated>
  ): void;

  once(event: "PriceOracleUpdated", cb: Callback<PriceOracleUpdated>): void;
  once(
    event: "PriceOracleUpdated",
    options: EventOptions,
    cb: Callback<PriceOracleUpdated>
  ): void;

  once(event: "ProxyCreated", cb: Callback<ProxyCreated>): void;
  once(
    event: "ProxyCreated",
    options: EventOptions,
    cb: Callback<ProxyCreated>
  ): void;
}
